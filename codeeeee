import pandas as pd

import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder

Load the downloaded sales dataset

dfpd.read csv("C:/Users/Shayness/Documents/117/IT Prof Elec 1/25 5 2024 2025/ITPE2 Lab/Fruits_Sales.csv")

print(df.head())

print(df.info())

Calculate basic statistics

def hasic statistics(data):

Tetal sales

total sales data "Sales".sum()

print('Total Sales: total _sales)")

Average sales per month

avg sales data.groupty("Honth") ['Sales"].wean()

print (f'Average Sales per Month:in/avg_sales)")

return total sales, avg sales

Run basic statistics functian

total sales, avg sales basic statistics(df)




def plot sales(data):

Convert enth to datetime, ensuring correct format

deta "Hanth pd.to datetime(data) hinth, format-e, errors coerce')

Plot sules aver time

plt.figure(figsize(10, 6))

plt.plot(data) Month, data['Sales'], label-'Sales Over Time', color-'b')

plt.title('Sales Over Time)

plt.xlabel("Month")

pit.ylabel('Sales')

plt.Ingend()

plt.sticks (rotation-45)

plt.show()

Plot soles datu

plot sales (df)




from sklearn.model selection isport train test split from sklearn.preprocessing import StandardScaler

Import numpy as np

Handle datetime conversion for the "wanth column df Honth pd.to datetime(df"month"), errors coerce')

Handle Niaxing Duto (putation)

def handle missing data(data):

PILL missing Profit values with the mean of the colu data 'Profit"] data 'Profit"].fillna(data 'Profit mean())

print("Hissing data imputed. Total missing values: \n(data.ixnull().sum())")

return data

Clem the data (imputation) of cleaned handle missing data(df)






def feature engineering(data):

#Extract year and month from Month column

data Year data Month.dt.year

data Manth tum data 'Month").dt.month

print (f"Extracted Year and Ponthin data "hunth", "Year", "Month Jum"]],head())")

return data

Run feature engineering

df featured feature engineering of cleaned)

#Scaling Mumerical Features (Soles, and Prufit

def scale numerical features(data):

ise Standardicalar to scale Sales" and "Frefit

scaler StandardScaler()

data 'Sales", 'Profit scaler.fit transform(data['Sales", "Prafit" [])

print("Scaled 'Sales' and 'Profit"\n(data['Sales", "Profit"]].head()")

return data

Aun scaling

df scaled scale_numerical_features(df_featured)

#Train-Test spite

def train test split_data(data):

Define features (X) and torget (y)

X-data['Sales", "Profit", "Year', 'Month hum', 'Residence Encoded #Fratures

y data 'Sales' Target var luble

#Spilt duto into training and testing sets (80% train, 20% text)

Xtrals, Xtest, y train, y test train test split(x, y, test size 8.2, random state-42)

print("Train-Test Split: (Xtrain.shape(0)) training samples, [X test.shape[0]) testing samples.")

return X train, X test, y train, y test

Run trole-test split

Xtrain, test, y train, y test train test split_data[df_scaled)

Output the first few rows of training dute

print("X train sample:Xtrain.head())")







from sklearn.linear_model import Linear Regression

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Linear Regression Model for Sales Forecasting

def linear_regression_model(X_train, X_test, y_train, y_test):

#Set X_train (refer to available numerical columns/data on chosen dataset)

X= df[['Profit', "Amount']]

ydf['Sales']

X_train, X_test, y_train, y_test train_test_split(X, y, test size 0.4, random state=42)

#Initialize the Linear Regression model

Ir model LinearRegression()

#Train the model

lr_model.fit(X_train, y_train)

#Predict on test data

y_pred Ir_model.predict(X_test)

#Evaluate the model

mae mean_absolute_error(y_test, y_pred)

mse mean_squared_error(y_test, y_pred)

r2r2_score(y_test, y_pred)

print(f"Linear Regression Model Evaluation:")

print (f"MAE: (mae]")

print(f"MSE: (mse)")

print(f"R-squared: {r2}")

return lr_model, y_pred

# Run Linear Regression

1r_model, y_pred_Ir = linear_regression_model(X_train, X_test, y_train, y_test)



from sklearn.tree import DecisionTreeRegressor

def decision tree regressor (X train, x_test, y train, y_test):

dt regressor DecisionTreeRegressor (random_state-42)

dt_regressor.fit(X_train, y_train)

y_pred_dt dt_regressor.predict(X_test)

mae_dt mean_absolute_error(y_test, y_pred_dt)

mse dt mean squared_error(y_test, y_pred_dt)

r2 dt r2_score(y_test, y_pred_dt)

print(f"Decission Tree Model (Regression) Evaluation:")

print("MAE: (mae dt)")

print("MSE: (mse dt)")

print(f"-squared: (r2_dt)")

return dt regressor, y_pred_dt

Decission Tree Model (Regression) Evaluation:

dt_regressar, y pred_dt decision tree regressor(X_train, X_test, y_train, y_test)

